import json
import datetime as dt
import logging
import requests
import openai
from dotenv import load_dotenv
import os

log_level = logging.INFO

load_dotenv()
graph_fb_insta_api_token = os.getenv('graph_fb_insta_api_token')
insta_account_id = os.getenv('insta_account_id')

graph_insta_base_url = "https://graph.facebook.com/v16.0/"
graph_insta_media_container_url = graph_insta_base_url + insta_account_id + "/media"
graph_insta_media_publish_container_url = graph_insta_base_url + insta_account_id + "/media_publish"

caption_base = "\nImmagine generata automaticamente da intelligenza artificiale.\nImage automatically generated by " \
               "artificial intelligence. \n\n\n"

caption_hashtags = "#openai #chatgpt #dalle2 #intelligenzaartificiale #ia #ai"

url_raw_contents = "https://raw.githubusercontent.com/"
sad_image_foler = "/mattoide/mattoide.github.io/master/images/sad/"
happy_image_foler = "/mattoide/mattoide.github.io/master/images/happy/"
sad_img_url = "https://github.com/mattoide/mattoide.github.io/tree/master/images/sad/"
happy_img_url = "https://github.com/mattoide/mattoide.github.io/tree/master/images/happy/"

openai.api_key = os.getenv('openai_api_token')
graph_fb_insta_api_token = os.getenv('graph_fb_insta_api_token')
insta_account_id = os.getenv('insta_account_id')

graph_insta_base_url = "https://graph.facebook.com/v16.0/"
graph_insta_media_container_url = graph_insta_base_url + insta_account_id + "/media"
graph_insta_media_publish_container_url = graph_insta_base_url + insta_account_id + "/media_publish"


def post_on_insta(image_url, caption):
    body = {'image_url': image_url, 'caption': caption, 'access_token': graph_fb_insta_api_token}
    resp = requests.post(graph_insta_media_container_url, json=body)
    print(resp.json())
    container_id = resp.json()['id']

    body = {'creation_id': container_id, 'access_token': graph_fb_insta_api_token}
    resp = requests.post(graph_insta_media_publish_container_url, json=body)

    logging.info(resp.json())

    logging.info("Caption immagine: \n" + caption)
    logging.info("Url immagine: \n" + image_url)
    confirm_post()

    return 1


def confirm_post():
    hour = dt.datetime.now().hour

    with open('lastStyleUsed.json') as f:
        json_file = json.load(f)
        json_file['lastStyleUsed'] = 1 if json_file['lastStyleUsed'] == 0 else 0

        if json_file['lastTimePublish'] == 0 and 14 <= hour <= 16:
            json_file['lastTimePublish'] = 1

        if json_file['lastTimePublish'] == 1 and 20 <= hour <= 22:
            json_file['lastTimePublish'] = 2

        if json_file['lastTimePublish'] == 2 and 9 <= hour <= 11:
            json_file['lastTimePublish'] = 0

        f = open("lastStyleUsed.json", "w")
        f.write(json.dumps(json_file))
        f.close()

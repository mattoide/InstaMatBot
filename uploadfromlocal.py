import os
from dotenv import load_dotenv
import random
import openai
import time
import json
import requests
import datetime as dt
from bs4 import BeautifulSoup
import sqlite3

load_dotenv()
graph_fb_insta_api_token = os.getenv('graph_fb_insta_api_token')
insta_account_id = os.getenv('insta_account_id')

graph_insta_base_url = "https://graph.facebook.com/v16.0/"
graph_insta_media_container_url = graph_insta_base_url + insta_account_id + "/media"
graph_insta_media_publish_container_url = graph_insta_base_url + insta_account_id + "/media_publish"

caption_base = "\nImmagine generata automaticamente da intelligenza artificiale.\nImage automatically generated by " \
               "artificial intelligence. \n\n\n"
caption_hashtags = "#openai #chatgpt #dalle2 #intelligenzaartificiale #ia #ai"

url_raw_contents = "https://raw.githubusercontent.com/"
sad_img_url = "https://github.com/mattoide/mattoide.github.io/tree/master/images/sad/"
happy_img_url = "https://github.com/mattoide/mattoide.github.io/tree/master/images/happy/"


def post_on_insta(image_url, caption):
    # body = {'image_url': image_url, 'caption': caption, 'access_token': graph_fb_insta_api_token}
    # resp = requests.post(graph_insta_media_container_url, json=body)
    #
    # container_id = resp.json()['id']
    #
    # body = {'creation_id': container_id, 'access_token': graph_fb_insta_api_token}
    # resp = requests.post(graph_insta_media_publish_container_url, json=body)
    #
    # print(resp.json())
    hour = dt.datetime.now().hour

    with open('lastStyleUsed.json') as f:
        json_file = json.load(f)
        json_file['lastStyleUsed'] = 1 if json_file['lastStyleUsed'] == 0 else 0

        if json_file['lastTimePublish'] == 0 and 14 <= hour <= 16:
            json_file['lastTimePublish'] = 1

        if json_file['lastTimePublish'] == 1 and 20 <= hour <= 22:
            json_file['lastTimePublish'] = 2

        if json_file['lastTimePublish'] == 2 and 9 <= hour <= 11:
            json_file['lastTimePublish'] = 0

        f = open("lastStyleUsed.json", "w")
        f.write(json.dumps(json_file))
        f.close()
    # print(caption)
    # print(image_url)


def what_post():
    with open('lastStyleUsed.json') as f:
        json_file = json.load(f)
        f.close()
        return json_file['lastStyleUsed']


def when_post():
    hour = dt.datetime.now().hour

    with open('lastStyleUsed.json') as f:
        json_file = json.load(f)

        if json_file['lastTimePublish'] == 0 and 14 <= hour <= 16:
            json_file['lastTimePublish'] = 1

        if json_file['lastTimePublish'] == 1 and 20 <= hour <= 22:
            json_file['lastTimePublish'] = 2

        if json_file['lastTimePublish'] == 2 and 9 <= hour <= 11:
            json_file['lastTimePublish'] = 0

        f = open("lastStyleUsed.json", "w")
        f.write(json.dumps(json_file))
        f.close()
        return json_file['lastTimePublish']


conn = sqlite3.connect('database.db')
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS sad_images
                  (id INTEGER PRIMARY KEY, name TEXT, posted BOOLEAN)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS happy_images
                  (id INTEGER PRIMARY KEY, name TEXT, posted BOOLEAN)''')

cursor.close()

while True:

    if what_post() == 0:
        response = requests.get(happy_img_url)

        image_url = ""

        if response.status_code == 200:

            html = response.text
            soup = BeautifulSoup(html, 'html.parser')

            links = soup.find_all('a')

            for link in links:
                href = link.get('href')
                if ".png" in href:
                    href = href.replace("blob/", "")
                    caption = href.replace("_", " #")
                    caption = caption.replace("/mattoide/mattoide.github.io/master/images/sad/", "")
                    caption = caption.replace("/mattoide/mattoide.github.io/master/images/happy/", "")
                    caption = caption.replace(".png", "")
                    caption = caption_base + caption_hashtags + caption
                    img_url = url_raw_contents + href

                    # print("caption")
                    # print(caption)
                    # print("url")
                    # print(img_url)

                    href = href.split("/")
                    href = href[len(href) - 1]

                    cursor = conn.cursor()

                    cursor.execute("SELECT * FROM happy_images WHERE name = ?", (href,))
                    row = cursor.fetchone()

                    if row:
                        name = row[1]
                        print("Gia presente: " + name)
                    else:
                        cursor.execute("INSERT INTO happy_images (name, posted) VALUES (?, ?)", (href, False))
                        conn.commit()

            cursor.execute("SELECT * FROM happy_images WHERE posted = ?", (False,))
            row = cursor.fetchone()

            if row:
                name = row[1]
                posted = post_on_insta(img_url, caption)
                if posted == 1:
                    cursor.execute("UPDATE happy_images SET posted = ? WHERE name = ?", (True, name))
                    conn.commit()
            else:
                print("Nessuna immagine che non sia stata gia postata")

            cursor.close()

        else:
            print("Errore nella richiesta:", response.status_code)

        cursor = conn.cursor()
        print("Table")
        cursor.execute("SELECT * FROM happy_images")
        rows = cursor.fetchall()
        for row in rows:
            print(row)

    if what_post() == 0:
        response = requests.get(sad_img_url)

    image_url = ""

    if response.status_code == 200:

        html = response.text
        soup = BeautifulSoup(html, 'html.parser')

        links = soup.find_all('a')

        for link in links:
            href = link.get('href')
            if ".png" in href:
                href = href.replace("blob/", "")
                caption = href.replace("_", " #")
                caption = caption.replace("/mattoide/mattoide.github.io/master/images/sad/", "")
                caption = caption.replace("/mattoide/mattoide.github.io/master/images/happy/", "")
                caption = caption.replace(".png", "")
                caption = caption_base + caption_hashtags + caption
                img_url = url_raw_contents + href

                # print("caption")
                # print(caption)
                # print("url")
                # print(img_url)

                href = href.split("/")
                href = href[len(href) - 1]

                cursor = conn.cursor()

                cursor.execute("SELECT * FROM sad_images WHERE name = ?", (href,))
                row = cursor.fetchone()

                if row:
                    name = row[1]
                    print("Gia presente: " + name)
                else:
                    cursor.execute("INSERT INTO sad_images (name, posted) VALUES (?, ?)", (href, False))
                    conn.commit()

        cursor.execute("SELECT * FROM sad_images WHERE posted = ?", (False,))
        row = cursor.fetchone()

        if row:
            name = row[1]
            posted = post_on_insta(img_url, caption)
            if posted == 1:
                cursor.execute("UPDATE sad_images SET posted = ? WHERE name = ?", (True, name))
                conn.commit()
        else:
            print("Nessuna immagine che non sia stata gia postata")

        cursor.close()

    else:
        print("Errore nella richiesta:", response.status_code)

    cursor = conn.cursor()
    print("Table")
    cursor.execute("SELECT * FROM sad_images")
    rows = cursor.fetchall()
    for row in rows:
        print(row)

    time.sleep(10)
